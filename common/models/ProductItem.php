<?php

namespace rgen3\product\common\models;

use Yii;

/**
 * This is the model class for table "{{%product_item}}".
 *
 * @property integer $id
 * @property string $slug
 * @property string $date_created
 *
 * @property ProductItemTranslation[] $productItemTranslations
 * @property ProductOrder[] $productOrders
 */
class ProductItem extends \yii\db\ActiveRecord
{
    public $translationModels = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%product_item}}';
    }

    public function afterSave($insert, $changedAttributes)
    {
        foreach ($this->translationModels as $language => $translation)
        {
            $translation->product_id = $this->id;
            $translation->language_code = $language;
            $translation->save();
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['date_created'], 'safe'],
            [['slug'], 'string', 'max' => 255],
        ];
    }

    public function getTranslation($lang = null, $initiate = false)
    {
        if ($lang === null)
        {
            $lang = Yii::$app->language;
        }

        $modelTranslation = ProductItemTranslation::findOne(['product_id' => $this->id, 'language_code' => $lang]);

        if (!$modelTranslation && $initiate)
        {
            $modelTranslation = new ProductItemTranslation();
        }

        return $modelTranslation;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'slug' => Yii::t('app', 'Slug'),
            'date_created' => Yii::t('app', 'Date Created'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductItemTranslations()
    {
        return $this->hasMany(ProductItemTranslation::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductOrders()
    {
        return $this->hasMany(ProductOrder::className(), ['product_id' => 'id']);
    }
}
